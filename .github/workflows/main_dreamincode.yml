name: Build and deploy Python app to Azure Web App - DreamInCode

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: DreamInCode           # <-- Cambia si tu App Service tiene otro nombre
  AZURE_RESOURCE_GROUP: DreamInCode-rg     # <-- Cambia al Resource Group real
  PYTHON_VERSION: "3.11"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Prepare clean deploy package (zip)
        run: |
          set -e

          STAGING="${RUNNER_TEMP}/staging"
          mkdir -p "$STAGING"

          # Copia solo lo necesario, excluyendo artefactos y carpetas que te
          # metían ruido en el ZIP (check/, deploy/, _preview/, zips, etc.)
          rsync -a \
            --exclude ".git/" \
            --exclude ".github/" \
            --exclude ".vscode/" \
            --exclude "__pycache__/" \
            --exclude "*.pyc" \
            --exclude "*.pyo" \
            --exclude "*.zip" \
            --exclude "check/" \
            --exclude "deploy/" \
            --exclude "_preview/" \
            ./ "$STAGING/"

          # Sanity checks que te evitan el ModuleNotFoundError: mcp_api
          test -f "$STAGING/application.py" || (echo "::error::No se encontró application.py en la raíz" && exit 1)
          test -d "$STAGING/mcp_api" || (echo "::error::No se encontró la carpeta 'mcp_api/'" && exit 1)
          test -f "$STAGING/requirements.txt" || (echo "::error::No se encontró requirements.txt" && exit 1)

          # Empaqueta lo limpio
          cd "$STAGING"
          zip -r "${GITHUB_WORKSPACE}/deploy.zip" . -x "*.pyc" "*__pycache__*"

      - name: Upload artifact (deploy.zip)
        uses: actions/upload-artifact@v4
        with:
          name: deploy-zip
          path: deploy.zip
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deploy-zip

      # Inicia sesión en Azure con OIDC (usa tus secretos existentes)
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_6BA6E9DDD9344460A57E284B6D0812C3 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_C6AD434C52964186A8976611DA67CC72 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_34E38F1804424A55A9ECE2C9A5C24519 }}

      # Despliegue con CLI para aprovechar la sesión anterior
      - name: Deploy to Azure Web App (az webapp deploy)
        uses: azure/CLI@v2
        with:
          inlineScript: |
            RG="${{ env.AZURE_RESOURCE_GROUP }}"
            APP="${{ env.AZURE_WEBAPP_NAME }}"
            ZIP="deploy.zip"

            if [ ! -f "$ZIP" ]; then
              echo "::error::No se encontró $ZIP para desplegar"
              exit 1
            fi

            # Zip Deploy + clean + restart
            az webapp deploy \
              --resource-group "$RG" \
              --name "$APP" \
              --type zip \
              --src-path "$ZIP" \
              --clean true \
              --restart true

            echo "Despliegue enviado a $APP (RG: $RG)"
